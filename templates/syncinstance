#!/usr/bin/env python
import os
import os.path
import sys
import subprocess
from optparse import OptionParser

usage = """
Import data from a local or remote instance
#########################################################
WARNING:
THIS COMMAND WILL OVERWRITE YOUR CURRENT DATA !!! BE CAREFUL

ALSO, CHECK IF YOU HAVE ENOUGH DISK SPACE IN EITHER
REMOTE AND CURRENT INSTANCE
#########################################################
    %prog instance_path
or
    %prog -r user@machine instance_path"""

LOCALDIR = '${buildout:directory}'

SNAPSHOTCOMMAND = '${buildout:snapshot-command}'
RESTORECOMMAND = '${buildout:restore-command}'
SNAPSHOTDIR = '${buildout:snapshot-dir}'

def call(cmd):
    """launch a command"""
    try:
        if subprocess.call(cmd) != 0:
            print "Something goes wrong. Check the output"
            exit(1)
    except OSError:
        exctype, value = sys.exc_info()[:2]
        print "Error with this command: %s" % (' '.join(cmd))
        print "Error: %s" % value
        exit(1)

def banner(s):
    """print a big banner"""
    print '#' * (len(s) + 2)
    print '# %s' % s
    print '#' * (len(s) + 2)


if __name__ == "__main__":
    parser = OptionParser(usage=usage)

    parser.add_option("-r", "--remote",
                      action="store", type="string", dest="remote", default='',
                      help="Sync from a remote instance using ssh")

    (options, args) = parser.parse_args()

    if len(args) != 1:
        parser.error("The instance path is required")

    instancepath = os.path.abspath(args[0])

#    if not os.path.isdir(instancepath):
#        parser.error("% is not a directory" % instancepath)
    cmd_remote = os.path.join(instancepath, SNAPSHOTCOMMAND)
    dir_remote = os.path.join(instancepath,  SNAPSHOTDIR)
    dir_local = os.path.join(LOCALDIR,  SNAPSHOTDIR)
    cmd_local = os.path.join(LOCALDIR,  RESTORECOMMAND)

    banner('launch snapshot of the remote instance')

    #launch snapshot
    if options.remote:
        cmd = ['ssh','-t']
        cmd += [options.remote, cmd_remote]
    else:
        cmd = [cmd_remote]

    call(cmd)

    banner('copy the snapshot')

    rsync_command = ['rsync', '-vzr', '--delete', '--progress']

    cmd = rsync_command[:]

    if options.remote:
        cmd.append('%s:%s/' % (options.remote,dir_remote ))
    else:
        cmd.append('%s/' % dir_remote)

    # destination
    cmd.append(dir_local)

    call(cmd)

    banner('importing the snapshot in the local instance')

    cmd = [cmd_local]

    call(cmd)

    banner('Done !!!')

